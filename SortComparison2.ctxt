#BlueJ class context
comment0.params=
comment0.target=SortComparison2()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ SortComparison2\r\n
comment1.params=a
comment1.target=void\ print_array(int[])
comment10.params=i
comment10.target=int\ RightChild(int)
comment11.params=a\ n\ i
comment11.target=void\ TrickleDown(int[],\ int,\ int)
comment11.text=\r\n\ This\ method\ implements\ the\ TrickleDown\ algorithm.\r\n\ \r\n\ Input\:\ Binary\ tree\ A\ of\ the\ size\ n\ starting\ from\ 0,\ \r\n\ \ \ \ \ \ \ \ i\ is\ the\ node\ to\ be\ trickle\ down.\r\n\ Output\:\ Tree\ A\ becomes\ max\ heap.\r\n\ \r\n\ @author\ (nxthang)\ \r\n\ @version\ (1.0)\r\n
comment12.params=a\ n
comment12.target=void\ BuildHeap(int[],\ int)
comment12.text=\r\n\ This\ method\ implements\ the\ BuildHeap\ algorithm.\r\n\ \r\n\ Input\:\ \ An\ array\ A\ of\ the\ size\ n,\ starting\ from\ 0.\r\n\ Output\:\ A\ becomes\ max\ heap.\r\n\ \r\n\ @author\ (nxthang)\ \r\n\ @version\ (1.0)\r\n
comment13.params=a
comment13.target=void\ Heap_Sort(int[])
comment13.text=\r\n\ This\ method\ implements\ the\ Heap\ sort\ algorithm.\r\n\ \r\n\ Input\:\ \ An\ array\ A.\r\n\ Output\:\ A\ is\ sorted.\r\n\ \r\n\ @author\ (nxthang)\ \r\n\ @version\ (1.0)\r\n
comment14.params=
comment14.target=void\ main()
comment2.params=a
comment2.target=void\ Selection_Sort(int[])
comment3.params=a
comment3.target=void\ Insertion_Sort(int[])
comment4.params=a
comment4.target=void\ Bubble_Sort(int[])
comment5.params=a\ left\ mid\ right
comment5.target=void\ Merge(int[],\ int,\ int,\ int)
comment6.params=a\ left\ right
comment6.target=void\ Merge_Sort(int[],\ int,\ int)
comment7.params=data\ idLeftMost\ idRightMost
comment7.target=int\ partition(int[],\ int,\ int)
comment7.text=\r\n\ This\ method\ implements\ partition\ algorithm\ for\ Quick\ sort\r\n\ Input\:\ An\ array\ A\ from\ idLeftmost\ to\ idRightmost,\ pivot\ is\ a[idLeftmost]\r\n\ Output\:\ j\ is\ the\ final\ position\ of\ pivot\ \r\n\ \ \ \ \ \ \ \ \ Array\ A\ is\ divided\ into\ two\ parts\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 1)\ x[i]\ <\=\ pivot\ for\ idLeftmost\ <\=\ i\ <\ j\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ 2)\ x[i]\ >\=\ pivot\ for\ j<i<\=\ idRightmost\r\n\ \ \ \ \ \ \ \ \ \ \ \r\n\ \r\n\ @author\ (nxthang)\ \r\n\ @version\ (1.0)\r\n
comment8.params=data\ idLeftmost\ idRightmost
comment8.target=void\ Quick_Sort(int[],\ int,\ int)
comment8.text=\r\n\ This\ method\ implements\ Quick\ sort\ algorithm\r\n\ Input\:\ An\ unsorted\ array\ A\ from\ idLeftmost\ to\ idRightmost\r\n\ Output\:\ A\ sorted\ array\r\n\ \r\n\ @author\ (nxthang)\ \r\n\ @version\ (1.0)\r\n
comment9.params=i
comment9.target=int\ LeftChild(int)
numComments=15
